#!/bin/bash

DIR=$(dirname $0)
cd $DIR

rm -rf agentclasses
rm FastAutoStartRelayAgent.jar

# Compile the agent into the agentclasses directory, enabling preview features for JDK 23
javac --enable-preview --release 23 -d agentclasses FastAutoStartRelayAgent.java

# Create JAR file manifest in agent.mf
cat > agent.mf << EOF
Premain-Class: FastAutoStartRelayAgent
Can-Retransform-Classes: true
EOF

# Create the agent JAR (Note there is a period after -C agentclasses)
jar --create --file=FastAutoStartRelayAgent.jar --manifest=agent.mf -C agentclasses .


case $(uname -m) in
    "arm64")
        ARCH=aarch64
        ;;
    "aarch64")
        ARCH=aarch64
        ;;
    *)
        ARCH=x64
        ;;
esac


echo $ARCH

JDKURL="https://download.java.net/java/GA/jdk23/3c5b90190c68498b986a97f276efd28a/37/GPL/openjdk-23_linux-${ARCH}_bin.tar.gz"

echo "the jdk url: $JDKURL"

cat << EOF > Dockerfile
FROM ghcr.io/lichess-org/lila-docker:main

RUN rm -rf /opt/java/openjdk

RUN curl -L -o jdk.tgz $JDKURL
RUN tar xzf jdk.tgz
RUN mv jdk-23 /opt/java/openjdk

ADD FastAutoStartRelayAgent.jar /

ENV _JAVA_OPTIONS="--enable-preview -javaagent:/FastAutoStartRelayAgent.jar"

EOF

IMAGE_WITH_AGENT=image-with-agent:latest

docker build -t $IMAGE_WITH_AGENT .

cd -

cleanup_containers() {
    docker rm --force lila > /dev/null 2>&1 || true
    docker rm --force app > /dev/null 2>&1 || true
    docker network rm lila-network > /dev/null 2>&1 || true
}

echo "Running integration tests"
cleanup_containers

docker network create lila-network
docker run --name lila --network lila-network -d $IMAGE_WITH_AGENT


docker run \
    --name app  \
    --hostname app \
    --network lila-network \
    --user $(id -u):$(id -g) \
    -e LILA_API="http://lila:9663" \
    -v $(pwd):/app \
    -w /app \
    eclipse-temurin:23 \
    java ./build/Build.java

exitCode=$?

cleanup_containers

[[ $exitCode -eq 0 ]] && echo "âœ… Done"
[[ $exitCode -ne 0 ]] && echo "ðŸ”´ Failed"

exit $exitCode
